def isMatch(s: str, p: str) -> bool:
    # Initialize a 2D DP table
    dp = [[False] * (len(p) + 1) for _ in range(len(s) + 1)]
    # Set the initial value for an empty string and pattern
    dp[0][0] = True
    
    # Fill in the DP table
    for i in range(len(s) + 1):
        for j in range(1, len(p) + 1):
            if p[j - 1] == '*':
                # Case when '*' matches zero or more of the preceding element
                dp[i][j] = dp[i][j - 2] or (i > 0 and (s[i - 1] == p[j - 2] or p[j - 2] == '.') and dp[i - 1][j])
            else:
                # Case when the characters match or '.' is encountered
                dp[i][j] = i > 0 and dp[i - 1][j - 1] and (s[i - 1] == p[j - 1] or p[j - 1] == '.')
    
    return dp[len(s)][len(p)]

# Test case
s = "aa"
p = "a"
print(isMatch(s, p))  # Output: False
